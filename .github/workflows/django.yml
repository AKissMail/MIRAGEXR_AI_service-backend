name: Django CI

on:
  workflow_dispatch:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.11
        cache: 'pip'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Create API key file
      env: 
        OPENAIKEY: ${{ secrets.OPENAIKEY }}
      run: |
        echo $OPENAIKEY > backend/.env
        cd backend
    - name: Run migrations
      run: |
        cd backend
        python manage.py migrate
    - name: Run tests
      run: |
        cd backend
        python manage.py test
    - name: Install expect
      run: |
        sudo apt-get install -y expect
    - name: Create superuser
      run: |
        cd backend
        expect -c 'spawn python manage.py createsuperuser; expect "Username:"; send "admin\r"; expect "Email:"; send "fnord@fnord.org\r"; expect "Password:"; send "test12345\r"; expect "Password (again):"; send "test12345\r"; interact'
    - name: Run server
      run: |
        cd backend
        python manage.py runserver 8000 &
    - name: Lint with flake8
      run: |
        # Halt workflow if flake8 finds Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. GitHub Actions will turn warnings into errors if flake8 finds anything
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Download Audio File for Tests
      run: | 
        curl -L https://github.com/AKissMail/MIRAGEXR_AI_service-backend/raw/master/postman_test_requests/audio_king.mp3 --output postman_test_requests/audio_king.mp3
    - name: Run postman tests
      run: |
        curl -o- "https://dl-cli.pstmn.io/install/linux64.sh" | sh
    - name: Login to Postman CLI
      run: postman login --with-api-key ${{ secrets.POSTMAN_API_KEY }}
    - name: Run API tests
      run: |
        postman collection run "18323610-f27895c0-4816-45e5-98ff-07005670725f" -e "18323610-af623a1c-f200-43eb-993a-4f501bcf45a4"
